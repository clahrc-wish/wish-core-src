/*******************************************************************************
 * Copyright 2013 Imperial College London
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
package uk.ac.imperial.clahrc.entity;

// Generated 15-Feb-2012 12:38:54 by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;

import static javax.persistence.GenerationType.IDENTITY;

import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.Size;
import javax.validation.constraints.NotNull;

/**
 * Projects generated by hbm2java
 */
@Entity
@Table(name = "projects", catalog = "clahrc2", uniqueConstraints = @UniqueConstraint(columnNames = "Name"))
public class Projects implements java.io.Serializable {

	private static final long serialVersionUID = 1L;
	
	private Integer id;
	private String name;
	private Date startDate;
    private Date implementationStartDate;
	private Date endDate;
    private String shortName;
	private String description;
    private String hostOrganization;
    private String siteStructure;
    private String type;
	private boolean active;
	private ProjectGroupings projectGroupings;
	private Set<Comment> comments = new HashSet<Comment>(0);
	private Set<Sustainability> sustainabilities = new HashSet<Sustainability>(0);
    private Set<ProjectTables> projectTableses = new HashSet<ProjectTables>(0);
	private Set<UserProjectRoles> userProjectRoleses = new HashSet<UserProjectRoles>(0);
	private Set<Ppi> ppis = new HashSet<Ppi>(0);
	private Set<Pdsa> pdsas = new HashSet<Pdsa>(0);
    private Set<UserProjectRoleRequests> userProjectRoleRequestses = new HashSet<UserProjectRoleRequests>(0);
    private Set<UserProjectRolesAudit> userProjectRolesAudits = new HashSet<UserProjectRolesAudit>(0);
	private Set<UserMessages> userMessageses = new HashSet<UserMessages>(0);

	public Projects() {
	}

	public Projects(String name, boolean active, ProjectGroupings projectGroupings) {
		this.name = name;
		this.active = active;
		this.projectGroupings = projectGroupings;
	}

	public Projects(String name, Date startDate,  Date implementationStartDate, Date endDate,
			String shortName, String description, String hostOrganization, String siteStructure, String type, 
			boolean active, ProjectGroupings projectGroupings,
			Set<Comment> comments, Set<Sustainability> sustainabilities,
			Set<ProjectTables> projectTableses, 
			Set<UserProjectRoles> userProjectRoleses, Set<Ppi> ppis,
			Set<Pdsa> pdsas, Set<UserProjectRoleRequests> userProjectRoleRequestses, 
			Set<UserProjectRolesAudit> userProjectRolesAudits, Set<UserMessages> userMessageses) {
		this.name = name;
		this.startDate = startDate;
	    this.implementationStartDate = implementationStartDate;
		this.endDate = endDate;
	    this.shortName = shortName;
		this.description = description;
	    this.hostOrganization = hostOrganization;
	    this.siteStructure = siteStructure;
	    this.type = type;
		this.active = active;
		this.projectGroupings = projectGroupings;
		this.comments = comments;
		this.sustainabilities = sustainabilities;
	    this.projectTableses = projectTableses;
		this.userProjectRoleses = userProjectRoleses;
		this.ppis = ppis;
		this.pdsas = pdsas;
	    this.userProjectRoleRequestses = userProjectRoleRequestses;
	    this.userProjectRolesAudits = userProjectRolesAudits;
		this.userMessageses = userMessageses;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "ID", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@Column(name = "Name", unique = true, nullable = false, length = 45)
	@NotNull
	@Size(max = 45)
	public String getName() {
		return this.name;
	}

	public void setName(String name) {
		this.name = (name != null ? name.toUpperCase().trim() : name);
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "Start_Date", length = 10)
	public Date getStartDate() {
		return this.startDate;
	}

	public void setStartDate(Date startDate) {
		this.startDate = startDate;
	}

	@Temporal(TemporalType.DATE)
    @Column(name="Implementation_Start_Date", length=10)
    public Date getImplementationStartDate() {
        return this.implementationStartDate;
    }
    
    public void setImplementationStartDate(Date implementationStartDate) {
        this.implementationStartDate = implementationStartDate;
    }

	@Temporal(TemporalType.DATE)
	@Column(name = "End_Date", length = 10)
	public Date getEndDate() {
		return this.endDate;
	}

	public void setEndDate(Date endDate) {
		this.endDate = endDate;
	}

	@Column(name="Short_Name", unique = true, nullable = false, length=45)
	@NotNull
    @Size(max=45)
    public String getShortName() {
        return this.shortName;
    }
    
    public void setShortName(String shortName) {
        this.shortName = (shortName != null ? shortName.trim() : shortName);
    }
    
	@Column(name = "Description", length = 10000)
	@Size(max = 10000)
	public String getDescription() {
		return this.description;
	}

	public void setDescription(String description) {
		this.description = (description != null ? description.trim() : description);
	}

	@Column(name="Host_Organization", length=45)
    @Size(max=45)
    public String getHostOrganization() {
        return this.hostOrganization;
    }
    
    public void setHostOrganization(String hostOrganization) {
        this.hostOrganization = (hostOrganization != null ? hostOrganization.trim() : hostOrganization);
    }

    @Column(name="Site_Structure", length=45)
    @Size(max=45)
    public String getSiteStructure() {
        return this.siteStructure;
    }
    
    public void setSiteStructure(String siteStructure) {
        this.siteStructure = (siteStructure != null ? siteStructure.trim() : siteStructure);
    }

    @Column(name="Type", length=45)
    @Size(max=45)
    public String getType() {
        return this.type;
    }
    
    public void setType(String type) {
        this.type = (type != null ? type.trim() : type);
    }

	@Column(name = "Active", nullable = false, columnDefinition = "BIT")
	public boolean isActive() {
		return this.active;
	}

	public void setActive(boolean active) {
		this.active = active;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "Grouping_ID", nullable = false)
	@NotNull
	public ProjectGroupings getProjectGroupings() {
		return this.projectGroupings;
	}

	public void setProjectGroupings(ProjectGroupings projectGroupings) {
		this.projectGroupings = projectGroupings;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "projects")
	public Set<Comment> getComments() {
		return this.comments;
	}

	public void setComments(Set<Comment> comments) {
		this.comments = comments;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "projects")
	public Set<Sustainability> getSustainabilities() {
		return this.sustainabilities;
	}

	public void setSustainabilities(Set<Sustainability> sustainabilities) {
		this.sustainabilities = sustainabilities;
	}

	@OneToMany(fetch=FetchType.EAGER, mappedBy="projects")
    public Set<ProjectTables> getProjectTableses() {
        return this.projectTableses;
    }
    
    public void setProjectTableses(Set<ProjectTables> projectTableses) {
        this.projectTableses = projectTableses;
    }
    
	@OneToMany(fetch = FetchType.EAGER, mappedBy = "projects")
	public Set<UserProjectRoles> getUserProjectRoleses() {
		return this.userProjectRoleses;
	}

	public void setUserProjectRoleses(Set<UserProjectRoles> userProjectRoleses) {
		this.userProjectRoleses = userProjectRoleses;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "projects")
	public Set<Ppi> getPpis() {
		return this.ppis;
	}

	public void setPpis(Set<Ppi> ppis) {
		this.ppis = ppis;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "projects")
	public Set<Pdsa> getPdsas() {
		return this.pdsas;
	}

	public void setPdsas(Set<Pdsa> pdsas) {
		this.pdsas = pdsas;
	}

	@OneToMany(fetch=FetchType.LAZY, mappedBy="projects")
    public Set<UserProjectRoleRequests> getUserProjectRoleRequestses() {
        return this.userProjectRoleRequestses;
    }
    
    public void setUserProjectRoleRequestses(Set<UserProjectRoleRequests> userProjectRoleRequestses) {
        this.userProjectRoleRequestses = userProjectRoleRequestses;
    }

    @OneToMany(fetch=FetchType.LAZY, mappedBy="projects")
    public Set<UserProjectRolesAudit> getUserProjectRolesAudits() {
        return this.userProjectRolesAudits;
    }
    
    public void setUserProjectRolesAudits(Set<UserProjectRolesAudit> userProjectRolesAudits) {
        this.userProjectRolesAudits = userProjectRolesAudits;
    }

	@OneToMany(fetch=FetchType.LAZY, mappedBy="projects")
    public Set<UserMessages> getUserMessageses() {
        return this.userMessageses;
    }
    
    public void setUserMessageses(Set<UserMessages> userMessageses) {
        this.userMessageses = userMessageses;
    }
    
}
