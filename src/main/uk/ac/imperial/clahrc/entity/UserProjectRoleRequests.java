/*******************************************************************************
 * Copyright 2013 Imperial College London
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
package uk.ac.imperial.clahrc.entity;
// Generated 22-Oct-2012 16:55:25 by Hibernate Tools 3.4.0.CR1


import java.sql.Timestamp;
import java.util.Calendar;
import java.util.Date;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.validation.constraints.NotNull;

/**
 * UserProjectRoleRequests generated by hbm2java
 */
@Entity
@Table(name="user_project_role_requests" ,catalog="clahrc2")
public class UserProjectRoleRequests  implements java.io.Serializable {


	private static final long serialVersionUID = 1L;
	
	private UserProjectRoleRequestsId id;
    private Users users;
    private Projects projects;
    private Roles roles;
    private Date rcTimestamp;

    public UserProjectRoleRequests() {
    }

    public UserProjectRoleRequests(UserProjectRoleRequestsId id, Users users, Projects projects, Roles roles, Date rcTimestamp) {
       this.id = id;
       this.users = users;
       this.projects = projects;
       this.roles = roles;
       this.rcTimestamp = rcTimestamp;
    }
   
    @EmbeddedId
    @AttributeOverrides( {
    @AttributeOverride(name="userId", column=@Column(name="User_ID", nullable=false) ), 
    @AttributeOverride(name="projectId", column=@Column(name="Project_ID", nullable=false) ) } )
    @NotNull
    public UserProjectRoleRequestsId getId() {
        return this.id;
    }
    
    public void setId(UserProjectRoleRequestsId id) {
        this.id = id;
    }

    @ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="User_ID", nullable=false, insertable=false, updatable=false)
    @NotNull
    public Users getUsers() {
        return this.users;
    }
    
    public void setUsers(Users users) {
        this.users = users;
    }

    @ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="Project_ID", nullable=false, insertable=false, updatable=false)
    @NotNull
    public Projects getProjects() {
        return this.projects;
    }
    
    public void setProjects(Projects projects) {
        this.projects = projects;
    }

    @ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="Role_ID", nullable=false)
    @NotNull
    public Roles getRoles() {
        return this.roles;
    }
    
    public void setRoles(Roles roles) {
        this.roles = roles;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="Rc_Timestamp", nullable=false, length=19)
    public Date getRcTimestamp() {
        return this.rcTimestamp;
    }
    
    public void setRcTimestamp(Date rcTimestamp) {
    	this.rcTimestamp = (rcTimestamp == null ? new Timestamp(Calendar.getInstance().getTimeInMillis()) : rcTimestamp);
    }
}


