/*******************************************************************************
 * Copyright 2013 Imperial College London
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
package uk.ac.imperial.clahrc.entity;

// Generated 09-Nov-2011 21:46:06 by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;
import javax.persistence.UniqueConstraint;
import javax.validation.constraints.NotNull;

/**
 * LoginAudit generated by hbm2java
 */
@Entity
@Table(name = "login_audit", catalog = "clahrc2", uniqueConstraints = @UniqueConstraint(columnNames = "Session_ID"))
public class LoginAudit implements java.io.Serializable {

	private static final long serialVersionUID = 1L;
	
	private LoginAuditId id;
	private Users users;
	private Date loggedOutDateTime;
	private Date sessionExpiredDateTime;

	public LoginAudit() {
	}

	public LoginAudit(LoginAuditId id, Users users) {
		this.id = id;
		this.users = users;
	}

	public LoginAudit(LoginAuditId id, Users users, Date loggedOutDateTime,
			Date sessionExpiredDateTime) {
		this.id = id;
		this.users = users;
		this.loggedOutDateTime = loggedOutDateTime;
		this.sessionExpiredDateTime = sessionExpiredDateTime;
	}

	@EmbeddedId
	@AttributeOverrides({
			@AttributeOverride(name = "userId", column = @Column(name = "User_ID", nullable = false)),
			@AttributeOverride(name = "sessionId", column = @Column(name = "Session_ID", unique = true, nullable = false, length = 45)),
			@AttributeOverride(name = "ipAddress", column = @Column(name = "IP_Address", nullable = false, length = 15)),
			@AttributeOverride(name = "loggedInDateTime", column = @Column(name = "LoggedIn_DateTime", nullable = false, length = 19)) })
	@NotNull
	public LoginAuditId getId() {
		return this.id;
	}

	public void setId(LoginAuditId id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "User_ID", nullable = false, insertable = false, updatable = false)
	@NotNull
	public Users getUsers() {
		return this.users;
	}

	public void setUsers(Users users) {
		this.users = users;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "LoggedOut_DateTime", length = 19)
	public Date getLoggedOutDateTime() {
		return this.loggedOutDateTime;
	}

	public void setLoggedOutDateTime(Date loggedOutDateTime) {
		this.loggedOutDateTime = loggedOutDateTime;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "SessionExpired_DateTime", length = 19)
	public Date getSessionExpiredDateTime() {
		return this.sessionExpiredDateTime;
	}

	public void setSessionExpiredDateTime(Date sessionExpiredDateTime) {
		this.sessionExpiredDateTime = sessionExpiredDateTime;
	}

}
