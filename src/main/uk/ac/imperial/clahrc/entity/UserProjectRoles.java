/*******************************************************************************
 * Copyright 2013 Imperial College London
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/
package uk.ac.imperial.clahrc.entity;
// Generated 22-Oct-2012 11:15:44 by Hibernate Tools 3.4.0.CR1


import javax.persistence.AttributeOverride;
import javax.persistence.AttributeOverrides;
import javax.persistence.Column;
import javax.persistence.EmbeddedId;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.validation.constraints.NotNull;

/**
 * UserProjectRoles generated by hbm2java
 */
@Entity
@Table(name="user_project_roles",catalog="clahrc2")
public class UserProjectRoles  implements java.io.Serializable, Comparable<Object> {


	private static final long serialVersionUID = 1L;
	
	private UserProjectRolesId id;
    private Users users;
    private Projects projects;
    private Roles roles;

    public UserProjectRoles() {
    }

    public UserProjectRoles(UserProjectRolesId id, Users users, Projects projects, Roles roles) {
       this.id = id;
       this.users = users;
       this.projects = projects;
       this.roles = roles;
    }
   
    @EmbeddedId
    @AttributeOverrides( {
    @AttributeOverride(name="userId", column=@Column(name="User_ID", nullable=false) ), 
    @AttributeOverride(name="projectId", column=@Column(name="Project_ID", nullable=false) ) } )
    @NotNull
    public UserProjectRolesId getId() {
        return this.id;
    }
    
    public void setId(UserProjectRolesId id) {
        this.id = id;
    }

    @ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="User_ID", nullable=false, insertable=false, updatable=false)
    @NotNull
    public Users getUsers() {
        return this.users;
    }
    
    public void setUsers(Users users) {
        this.users = users;
    }

    @ManyToOne(fetch=FetchType.EAGER)
    @JoinColumn(name="Project_ID", nullable=false, insertable=false, updatable=false)
    @NotNull
    public Projects getProjects() {
        return this.projects;
    }
    
    public void setProjects(Projects projects) {
        this.projects = projects;
    }

    @ManyToOne(fetch=FetchType.EAGER)
    @JoinColumn(name="Role_ID", nullable=false)
    @NotNull
    public Roles getRoles() {
        return this.roles;
    }
    
    public void setRoles(Roles roles) {
        this.roles = roles;
    }
    
    public int compareTo( Object RoleId ) {
    	if ( RoleId instanceof UserProjectRoles ) {
    		if ( this.users.getId() == ((UserProjectRoles)RoleId).users.getId() &&
    			  this.projects.getId() != ((UserProjectRoles)RoleId).projects.getId() &&
    			  this.roles.getId() == ((UserProjectRoles)RoleId).roles.getId() ) {
    			// if here - comparing user's own user_project_roles which happen to have the same role for different projects
    			// in this case use projectIds.This isn't currently used but avoids a problem with 'hiding' records in 'user.getUserProjectRoleses()'s return.
    			return Integer.valueOf( this.projects.getId() ).compareTo( Integer.valueOf(((UserProjectRoles)RoleId).projects.getId()) );
    		}
			return Integer.valueOf( this.roles.getId() ).compareTo( Integer.valueOf(((UserProjectRoles)RoleId).getRoles().getId()) );
		}
		if ( RoleId instanceof Roles ) {
			return Integer.valueOf( this.roles.getId() ).compareTo( Integer.valueOf( ((Roles)RoleId).getId() ) );
		}
		if ( RoleId instanceof Integer ) {
			return Integer.valueOf( this.roles.getId() ).compareTo( ((Integer)RoleId) );
		}
		throw new ClassCastException( "Invalid type: " + (RoleId == null ? "null" : RoleId.toString()) );
	}
}


